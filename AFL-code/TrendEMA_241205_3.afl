// 1
// MA
firstMALength = 10; //Optimize("firstMALength", 20, 5, 120, 5);
firstMA = EMA(C, firstMALength);
secondMALength = 10; //Optimize("secondMALength", 20, 5, 40, 5);
secondMA = EMA(firstMA, secondMALength);

// Volume
volumeCondition = MA(V, 100) > 50000;

// RS Calculation
WatchlistName = "Backtest universe";
wlnumber = CategoryFind(WatchlistName, cat = categoryWatchlist); 
tickerlist =CategoryGetSymbols(cat, wlnumber);
ListQty = StrCount(tickerlist, ",") + 1;

rocPeriod = 40;// Param("ROC Periods", 40, 20, 80, 10);
// Determine the quantity of stocks to rank
StaticVarSet("UniListTotal", ListQty, True);
if (Status("stocknum") == 0) 
{
    // Clear the static vars from last run
    StaticVarRemove("RS_*");
    StaticVarRemove("RSraw_*");
    StaticVarRemove("RankRSraw*_");

    // Generate the raw RS score for every stock and store in a static var
    for (n = 0; (Symbol = StrExtract(tickerlist, n)) != ""; n++) 
    { 
        SetForeign(Symbol, 0); 
        RSraw = 0;
		// Define the period
		
		// Calculate 1-day returns
		dailyReturns = ROC(Close, 1); // Rate of change for 1 day

		// Calculate standard deviation over the period
		stdDevReturns = StDev(dailyReturns, 60);
        RSraw = stdDevReturns; 

        RestorePriceArrays(); 
        StaticVarSet("RSraw_" + Symbol, RSraw, True); 
    }

    // Rank the stocks using this extremely useful function!
    StaticVarGenerateRanks("Rank", "RSraw_", 0, 1224);

    // Convert the static var ranks generated into a percentile score
    for (n = 0; (Symbol = StrExtract(tickerlist, n)) != ""; n++) 
    {
        Rank = StaticVarGet("RankRSraw_" + Symbol); 
        RSpctile = 100 - 100 * Rank / ListQty; 
        StaticVarSet("RS_" + Symbol, RSpctile, True);
    }
}

// Plot the RS values for each stock
Symbol = Name(); // Get the current stock symbol
RS = StaticVarGet("RS_" + Symbol); // Retrieve the RS value for the current stock
// MA_RS = MA(RS, 20);
// Define RS ranges and optimize for each range
RS_LowerBound = Optimize("RS Lower Bound", 40, 0, 90, 10);  // Lower bound of the RS range
RS_UpperBound = RS_LowerBound + 10;                        // Upper bound of the RS range (e.g., 0-10, 10-20, etc.)
RSCondition = RS > RS_LowerBound AND RS <= RS_UpperBound;


Buy = Cross(firstMA, secondMA) AND volumeCondition AND RSCondition;
Sell = Cross(secondMA, firstMA);
// Prevent overlapping signals
Buy = ExRem(Buy, Sell);
Sell = ExRem(Sell, Buy);


// Plot the signals on the chart for visualization
Plot(Close, "Close", colorDefault, styleCandle);
Plot(firstMA, "First MA", colorred, styleLine);
Plot(secondMA, "Second MA", colorAqua, styleLine);
PlotShapes(IIf(Buy, shapeUpArrow, shapeNone), colorBrightGreen, 0, Low, -10);
PlotShapes(IIf(Sell, shapeDownArrow, shapeNone), colorRed, 0, 1.03*High, 10);

// Trade settings
InitialEquity = 500000;
CommissionAmount = 0.1;
SetOption( "InitialEquity", InitialEquity );
SetOption( "CommissionMode", 1 ); /*1 = percent, 2 = fixed */
SetOption( "CommissionAmount", CommissionAmount );
RoundLotSize = 100;
SetTradeDelays(1,1,1,1);
